// Синхронно загружаем данные из файлов JSON при импорте модуля.
const posts = require("../data/posts.json");
const comments = require("../data/comments.json");
const users = require("../data/users.json");
const categories = require("../data/categories.json");
const tags = require("../data/tags.json");

// Реализуйте все приведённые ниже методы.
module.exports = {
  posts: {
    /**
     * Возвращает все посты.
     *
     * @return {array} Посты.
     */
    all: () => posts,

    /**
     * Возвращает пост по его идентификатору.
     *
     * @param {number} id - Идентификатор поста.
     * @return {object} Пост.
     */
    byId(id) { /* ... */ },

    /**
     * По идентификатору поста возвращает пользователя,
     * являющегося его автором.
     *
     * @param {number} id - Идентификатор поста.
     * @return {object} Пользователь.
     */
    author(id) { /* ... */ },

    /**
     * Возвращает все категории поста по его идентификатору.
     *
     * @param {number} id - Идентификатор поста.
     * @return {array} Категории поста.
     */
    categories(id) { /* ... */ },

    /**
     * Возвращает все тэги поста по его идентификатору.
     *
     * @param {number} id - Идентификатор поста.
     * @return {array} Тэги поста.
     */
    tags(id) { /* ... */ },

    /**
     * Возвращает все комментарии к посту по его идентификатору.
     *
     * @param {number} id - Идентификатор поста.
     * @return {array} Комментарии к посту.
     */
    comments(id) { /* ... */ },
  },

  comments: {
    /**
     * Возвращает все комментарии.
     *
     * @return {array} Комментарии.
     */
    all: () => comments,

    /**
     * Возвращает комментарий по его идентификатору.
     *
     * @param {number} id - Идентификатор комментария.
     * @return {object} Комментарий.
     */
    byId(id) { /* ... */ },

    /**
     * По идентификатору комментария возвращает пост,
     * к которому он относится.
     *
     * @param {number} id - Идентификатор комментария.
     * @return {object} Пост.
     */
    post(id) { /* ... */ },

    /**
     * По идентификатору комментария возвращает пользователя,
     * являющегося его автором.
     *
     * @param {number} id - Идентификатор комментария.
     * @return {object} Пользователь.
     */
    author(id) { /* ... */ },
  },

  users: {
    /**
     * Возвращает всех пользователей.
     *
     * @return {array} Пользователи.
     */
    all: () => users,

    /**
     * Возвращает пользователя по его идентификатору.
     *
     * @param {number} id - Идентификатор пользователя.
     * @return {object} Пользователь.
     */
    byId(id) { /* ... */ },

    /**
     * Возвращает все посты пользователя по его идентификатору.
     *
     * @param {number} id - Идентификатор пользователя.
     * @return {array} Посты пользователя.
     */
    posts(id) { /* ... */ },

    /**
     * Возвращает все комментарии пользователя по его идентификатору.
     *
     * @param {number} id - Идентификатор пользователя.
     * @return {array} Комментарии пользователя.
     */
    comments(id) { /* ... */ },
  },

  categories: {
    /**
     * Возвращает все категории.
     *
     * @return {array} Категории.
     */
    all: () => categories,

    /**
     * Возвращает категорию по её идентификатору.
     *
     * @param {number} id - Идентификатор категории.
     * @return {object} Категория.
     */
    byId(id) { /* ... */ },

    /**
     * Возвращает все посты в категории по её идентификатору.
     *
     * @param {number} id - Идентификатор категории.
     * @return {array} Посты в категории.
     */
    posts(id) { /* ... */ },
  },

  tags: {
    /**
     * Возвращает все тэги.
     *
     * @return {array} Тэги.
     */
    all: () => tags,

    /**
     * Возвращает тэг по его идентификатору.
     *
     * @param {number} id - Идентификатор тэга.
     * @return {object} Тэг.
     */
    byId: (id) => tags.find(tag => tag.id === id),

    /**
     * Возвращает все посты с тегом по его идентификатору.
     *
     * @param {number} id - Идентификатор тэга.
     * @return {array} Посты по тэгу.
     */
    posts: (id) => posts.filter(post => post.tags.includes(id)),
  }
};